#!/usr/bin/env bash
#
# Bootstrap script for setting up a new OSX machine
#
# This should be idempotent so it can be run multiple times.
#

# load helper functions
for file in ~/.{functions,}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

echo_ok "Install starting..."

if ask "Decrypt files from yadm?" N; then

    echo_warn "Decrypting files..."

    # decrypt files
    yadm decrypt;

    # fix permissions on decrypted files

    # private gpg
    if [[ -f ~/.gnupg/private.key ]] ; then 
         chmod 600 ~/.gnupg/private.key;
    fi

    # private ssh
    if [[ -f ~/.ssh/id_ed25519.key ]] ; then 
         chmod 600 ~/.ssh/id_ed25519.key;
    fi

    # private ssh rsa
    if [[ -f ~/.ssh/id_rsa ]] ; then
        chmod 600 ~/.ssh/id_rsa;
    fi
else
    echo_ok "Skipping decrpyt step"
fi


# requires xcode and tools!
xcode-select -p || {
    echo_error "XCode must be installed! (run xcode-select --install)"
    exit 1
}

# update your computer
if ask "Perform latest apple update?" N; then
    echo_warn "Updating to latest apple software"
    sudo softwareupdate -i -a
else
    echo_ok "Skipping apple update"
fi

# homebrew
if command_exists brew; then
    echo_ok "Homebrew already installed. Getting updates..."
    brew update
    brew doctor
else
    echo_error 'brew must be installed! (/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")'
    exit 1
fi

if brew bundle check --global; then
    echo_ok "Brew packages up to date."
else
    echo_warn "Syncing brew packages with brew bundle"
    brew bundle install --global
    brew bundle --force cleanup --global
    brew cleanup
fi

# npm
# list of packages to install globally with npm
NPM_PACKAGES=(
	yarn
    @jarred/git-peek
)
if command_exists npm; then
    echo_warn "Updating npm and globally installed npm packages"
    npm install npm -g
    npm install -g "${NPM_PACKAGES[@]}"
    npm update -g
fi

# asdf
# add node-js plugin https://github.com/asdf-vm/asdf-nodejs
asdf plugin-add nodejs
asdf install nodejs latest
asdf global nodejs "$(asdf latest nodejs)"
# add direnv plugin
asdf plugin-add direnv
asdf install direnv latest
asdf global direnv "$(asdf latest direnv)"
# add python plugin
asdf plugin add python
asdf install python latest
asdf global python system

# zsh

cat <<'EOF' | zsh -l

if [[ -f ~/.zshrc ]] ; then
    source ~/.zshrc
fi

# load helper functions
for file in ~/.{functions,}; do
    [ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

if command_exists zinit; then
    echo_ok "zinit already installed. Getting updates..."
    zinit self-update
else
    echo_warn "Installing zinit."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)"
fi

# update zinit plugins
echo_warn "Updating zinit plugins."
zinit update
EOF


# github

# set up local uncommitted information
if [[ ! -f ~/.gitconfig.local ]]; then
    echo_warn "Setting up local github information."
    echo ''
    echo '##### Please enter your github username: '
    read github_user
    echo '##### Please enter your github email address: '
    read github_email
    echo '##### Please enter your name for commits: '
    read github_name

    # setup github local
    if [[ $github_user && $github_email ]]; then
        # setup config
        git config --file ~/.gitconfig.local user.name "$github_name";
        git config --file ~/.gitconfig.local user.email "$github_email";
        git config --file ~/.gitconfig.local github.user "$github_user";
    fi
fi


github_name=$(git config --file ~/.gitconfig.local user.name)
github_email=$(git config --file ~/.gitconfig.local user.email)
github_user=$(git config --file ~/.gitconfig.local github.user)

if [[ $github_email ]]; then

    # ssh
    if ask "Set up ssh key?" N; then
        # generate a private key if it doesn't exist
        if [[ ! -f ~/.ssh/id_ed25519.key ]] ; then
            echo_warn "Setting up private ssh key."

            ssh-keygen -t ed25519 -C ${github_email} -f ~/.ssh/id_ed25519.key <<< y
        else
            echo_ok "Found existing ssh key"
        fi

        # generate a public key if it doesn't exist
        if [[ ! -f ~/.ssh/id_ed25519.key.pub ]] ; then 
            echo_warn "Setting up public ssh key."

            ssh-keygen -y -f ~/.ssh/id_ed25519.key > ~/.ssh/id_ed25519.key.pub
        fi

        if [[ -f ~/.ssh/id_rsa && ! -f ~/.ssh/id_rsa.pub ]] ; then
            echo_warn "Setting up public ssh key."

            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
        fi

        echo_ok "adding ssh key to ssh-agent"
        # start ssh agent in background
        eval "$(ssh-agent -s)"
        # add ssh key to the ssh-agent
        ssh-add -K ~/.ssh/id_ed25519.key;
        if [[ -f ~/.ssh/id_rsa ]] ; then
            ssh-add -K ~/.ssh/id_rsa
        fi

        # set ssh key permissions
        chmod 644 ~/.ssh/id_ed25519.key.pub;
        chmod 600 ~/.ssh/id_ed25519.key;
        if [[ -f ~/.ssh/id_rsa ]] ; then
            chmod 644 ~/.ssh/id_rsa.pub
            chmod 600 ~/.ssh/id_rsa
        fi
    else
        echo_ok "skipping ssh key generation"
    fi 


    #gpg
    if ask "Setup gpg key for commit signing?" N ;  then

        # create a script to generate the key
        GPG_GEN_KEY_SCRIPT="${HOME}/.gpg-gen-key-script";

        cat <<EOF > "${GPG_GEN_KEY_SCRIPT}"
    %echo running gpg key generation
    %ask-passphrase
    Key-Type: default
    Subkey-Type: default
    Name-Real: ${github_name}
    Name-Email: ${github_email}
    Expire-Date: 0
EOF

        # if private key exists then import it
        if  [[ -f ~/.gnupg/private.key ]] ; then
            echo_ok "Found existing key, importing..."
            gpg --import ~/.gnupg/private.key
        fi

        # generate the key if no key is associated with the user
        if gpg --list-secret-keys --keyid-format LONG "$github_email" 2>&1 | grep -q 'gpg: error reading key: No secret key'; then
            # if no gpg key exists then create one
            echo_warn "generating gpg key for git email $github_email"
            gpg --batch --gen-key "$GPG_GEN_KEY_SCRIPT"
        else
            # if a gpg key is already associated with this email we're done
            echo_ok "already found gpg key associated with $github_email"
        fi

        # remove the gpg key gen script
        rm "$GPG_GEN_KEY_SCRIPT"

        # get the gpg key id
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG --with-colons "$github_email" | head -n 1 | cut -d ":" -f "5")

        if ask "Export gpg keys for upload and backup?" Y; then
            # export the key for import into github
            rm -f ~/.gnupg/public.key;
            rm -f ~/.gnupg/private.key;
            gpg --output ~/.gnupg/public.key --armor --export "$GPG_KEY_ID";
            gpg --output ~/.gnupg/private.key --armor --export-secret-key "$GPG_KEY_ID";
            # set gpg key permissions
            chmod 644 ~/.gnupg/public.key;
            chmod 600 ~/.gnupg/private.key;
        fi

        if ask "Sign git commits with gpg key?" Y; then
            echo_ok "enabling commit signing"
            # set the signing key in the git config
            git config --file ~/.gitconfig.local user.signingkey $GPG_KEY_ID
            # enable gpg signing
            git config --file ~/.gitconfig.local commit.gpgsign true
        else
            echo_ok "disabling commit signing"
            # disable gpg signing
            git config --file ~/.gitconfig.local commit.gpgsign false
        fi

        # reload the gpg agent to add settings
        { gpg-connect-agent reloadagent /bye; } >/dev/null
    else
        echo_ok "skipping gpg key generation"
    fi


fi



if ask "add sensitive data to yadm?" N ; then 
    # encrypt with yadm
    echo_warn "encrypting sensistve data to yadm"
    yadm encrypt
else
    echo_ok "skipping yadm encryption"
fi


if  ask "set up macos defaults?" N ; then
    echo_warn "setting up mac os defaults"
    ./.macos
else
    echo_ok "skipping mac os setup"
fi

# manual steps
echo_warn "********************** MANUAL STEPS **********************"
echo_warn "********************** First Install Only **********************"
echo_warn "You may want to remap keys in System Preferences → Keyboard → Modifier Keys"
echo_warn "Follow the instructions to install powerlevel10k fonts https://github.com/romkatv/powerlevel10k#manual-font-installation"
echo_warn "Upload gpg key from "${HOME}/.gnupg/public.key" to github https://docs.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account"
echo_warn "\tpbcopy < ~/.gnupg/public.key"
echo_warn "Upload ssh key from "${HOME}/.ssh/id_ed25519.key.pub" to github https://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account"
echo_warn "\tpbcopy < ~/.ssh/id_ed25519.key.pub"

# done
echo_ok "Bootstrapping complete"
